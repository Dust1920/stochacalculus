{
  "hash": "5e832748583a0349eef171ade371defa",
  "result": {
    "markdown": "# Codigos Usados en las Tareas. (Se encuentran en la carpeta PythonScripts)\n\n\n## Movimiento Browniano\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\ndef u(t: float, n_points: int):\n    dt = t / (n_points - 1)\n    dw = np.sqrt(dt) * np.random.standard_normal(n_points - 1)\n    w = np.zeros(n_points)\n    w[1:] = dw.cumsum()\n    time = np.linspace(0, t, n_points)\n    return time, w\n\n```\n:::\n\n\n## Intregral de Ito\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\ndef f(x: float, t: float):\n    y = x ** 2\n    return y\n     \n\ndef fB(partition: np.array, x: float, t: float):\n    y = 0\n    for i in range(len(partition) - 1):\n        if partition[i] <= t < partition[i + 1]:\n            y = f(x, t)\n    return y\n\ndef ito_n(n_points: int, t: float):\n    time, w = bw.u(t, n_points)\n    integral = np.zeros(n_points)\n    for i in range(n_points - 1):\n        integral[i] = fB(time, w[i], time[i]) * (w[i + 1] - w[i])\n    ito = integral.sum()\n    return w, ito\n\n```\n:::\n\n\n## Integral de Riemann\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\n\ndef v(t: float):\n    y = np.exp( - t)\n    return y\n\ndef riemann_integral(a, b, n_points):\n    r = np.zeros(n_points)\n    time = np.linspace(a,b,n_points)\n    for i in range(n_points - 1):\n        r[i] = v(time[i]) * (time[i + 1] - time[i])\n    riemann = r.sum()\n    return riemann\n\n```\n:::\n\n\n",
    "supporting": [
      "aux_codes_files\\figure-pdf"
    ],
    "filters": []
  }
}