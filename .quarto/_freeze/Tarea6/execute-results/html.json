{
  "hash": "034c96ecad57b6990f83e50d46c60732",
  "result": {
    "markdown": "# Tarea 6\n\n\n::: {#exr-1}\nHacer un script para simular 10000 trayectorias del proceso $u(t,W_t)$ definido en el Ejercicio. Grafique en una figura, 10 trayectorias y la media de las 10000 trayectorias del proceso $u(t, W_t)$. \n:::\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef strong_brownian(t, n):\n    dt = t / n\n    dw = np.zeros(n)\n    w = np.zeros(n)\n    for i in np.arange(1, n):\n        dw[i] = np.sqrt(dt)*np.random.standard_normal()\n        w[i] = w[i - 1] + dw[i]\n    time = np.linspace(0, t, n)\n    return time, w\n\n\n\ndef b_function(t, a, w):\n    y = np.exp(t - a * w)\n    return y\n\n\nn_samples = 10000\nn_points = 64\nt_initial = 0\nt_final = 1\n\nmean = np.zeros(n_points)\nfor i in range(n_samples):\n    time, b_w = strong_brownian(t_final, n_points)\n    y = b_function(time, 0.25, b_w)\n    if i < 10:\n        plt.plot(time, b_w, 'g-', alpha=0.5)\n    mean += y\n\nmean = (n_samples)**(-1) * mean\ntime = np.linspace(0, t_final, n_points)\n\ny = [np.exp(33 / 32 * t) for t in time]\nplt.plot(time, mean, 'r-')\nplt.plot(time, y, 'b-', alpha=0.3)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Tarea6_files/figure-html/cell-2-output-1.png){width=569 height=413}\n:::\n:::\n\n\n::: {#exr-1}\nSiguiendo las ideas del refinamiento del camino browniano. $t_{i + 1/2} = t_i + \\dfrac{1}{2}\\delta t$. Hacer un cÃ³digo de Python para el refinamiento del Browniano para $\\alpha \\in (0, 1)$ para el refinamiento $t_{i+ \\alpha} = t_i + \\alpha \\delta t $ \n:::\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef strong_brownian(t, n):\n    dt = t / n\n    dw = np.zeros(n)\n    w = np.zeros(n)\n    for i in np.arange(1, n):\n        dw[i] = np.sqrt(dt)*np.random.standard_normal()\n        w[i] = w[i - 1] + dw[i]\n    time = np.linspace(0, t, n)\n    return time, w\n\nt_final = 1\nn_points = 65\ndelta_t = 1/(n_points - 1)\nalpha = 0.7\n\nprng = np.random.RandomState(219)\n\ntime, w = strong_brownian(1, n_points)  # w_i\n\ny = np.sqrt(delta_t * (alpha - alpha ** 2)) * prng.standard_normal(n_points - 1)\n\nw_ = np.roll(w, -1)  # w_i+1\n\nw_alpha = alpha * w_ + (1 - alpha) * w\nw_alpha = np.delete(w_alpha, -1)\nw_alpha += y\nw_ref = np.zeros(2* n_points -1)\n\nw_ref[0::2] = w\nw_ref[1::2] = w_alpha\n\ntime_ref = np.zeros(2 * n_points - 1)\n\nfor i in range(2 * n_points - 1):\n    if i % 2 == 0:\n        time_ref[i] = time[int(i / 2)]\n    else:\n        time_ref[i] = time[int(i / 2)] + alpha * delta_t\n\nplt.plot(time_ref, w_ref, 'g-')\nplt.plot(time, w, 'ro')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Tarea6_files/figure-html/cell-3-output-1.png){width=582 height=411}\n:::\n:::\n\n\n",
    "supporting": [
      "Tarea6_files"
    ],
    "filters": [],
    "includes": {}
  }
}