{
  "hash": "8e22c9564dad210d8ad452bced47c581",
  "result": {
    "markdown": "# Tarea 4\n\n::: {#exr-1}\nSea $W(t)$ un movimiento Browniano estándar en $[0,T]$. Pruebe que para cualquier $c>0$ fijo, \n$$\nV(t) = \\dfrac{1}{c} W(c^2 t)\n$$\n\nes un movimiento Browniano sobre $[0,T]$. \n::: \n\n### Demostración\nDemostraremos que $V$ cumple las propiedades del movimiento Browniano. \n\n#### Propiedad 1\nEs claro que $V(0) = \\dfrac{1}{c} W (c^2 0)=0$.\n\n#### Propiedad 2 (Incrementos Independientes)\nSean $s<t<u<v$ tenemos que \n$$\nE[\\left(V(t)-V(s)\\right)\\left(V(v)-V(u)\\right)]=\\dfrac{1}{c^2}E[\\left(W(c^2 t)-W(c^2 s)\\right)\\left(W(c^2 v)-W(c^2 u)\\right)]\n$$ \n\nComo el browniano tiene incrementos independientes.\n\\begin{align*}\n\\dfrac{1}{c^{2}}E\\left[\\left(W(c^{2}t)-W(c^{2}s)\\right)\\left(W(c^{2}v)-W(c^{2}u)\\right)\\right] & =\\dfrac{1}{c^{2}}E\\left[\\left(W(c^{2}t)-W(c^{2}s)\\right)\\right]E\\left[\\left(W(c^{2}v)-W(c^{2}u)\\right)\\right]\\\\\n & =0\n\\end{align*}\n\nEntonces $V$ tiene incrementos independientes.\n\n#### Propiedad 3 (Incrementos estacionarios)\nConsidere $s<t$. \n$$\nV(t)-V(s)=\\dfrac{1}{c}\\left[W(c^2 t) - W(c^2 s)\\right]\n$$\n\nPor propiedades del movimiento Browniano.\n\n\\begin{align*}\nE\\left[V(t)-V(s)\\right] & =\\dfrac{1}{c}E\\left[W(c^{2}t)-W(c^{2}s)\\right]=0\\\\\n\\text{Var}\\left[V(t)-V(s)\\right] & =\\dfrac{1}{c^{2}}\\text{Var}\\left[W(c^{2}t)-W(c^{2}s)\\right]=\\dfrac{1}{c^{2}}\\left(c^{2}\\left(t-s\\right)\\right)=t-s\n\\end{align*}\n\nEntonces $V$ tiene incrementos estacionarios. \n\n### Por lo tanto, $V$ es un movimiento browniano.\n\n::: {#exr-1}\nHacer un script para ilustrar la propiedad de escalado del movimiento Browniano para el caso de $c = \\dfrac{1}{5}$. Estar seguro que usa el mismo camino browniano discretizado en cada subplot.\n:::\nEl código, se encuentra en `hw4_p2.py`. Pero aquí se muestran los resultados. \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Importamos las librerias necesarias \nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Comenzaremos simulando el movimiento browniano fuerte.\n\nprng = np.random.RandomState(10)  # Fijamos la semilla. \n\nt_final = 1  # Extremo derecho del intervalo [0,T]\nn_points = 64  # No olvidemos que aquí se incluye el 0 y t.\ndt = 1 / (n_points - 1)  # Ajuste al delta t\n\ndw = np.sqrt(dt) * prng.standard_normal(n_points - 1)  # Calculamos los incrementos.\nw = np.concatenate(([0], dw.cumsum()))\n\ntime = np.linspace(0, t_final, n_points)  # Vector de tiempo.\n\n# plt.plot(time, w)        Graficamos el browniano base.\n# plt.show()\n\n\"\"\"\nAhora, comenzamos con el browniano escalado. \n\"\"\"\nc = 0.2  # 1/5\n\n\n\"\"\"\nEsto tiene dos interpretaciones. \nSin embargo, para este ejercicio debemos partir de una trayectoria dada, entonces haremos la transformación. \n\"\"\"\n\nc_time = c**2 * time  # Transformamos el intervalo del tiempo\nc_w = c**(-1) * w  # Escalamos el browniano. \n\nprint(\"El valor de c es \",c)\nfig, cbrown = plt.subplots(2)\ncbrown[0].plot(time, w)\ncbrown[1].plot(c_time, c_w)\ncbrown[0].set_title('Movimiento browniano')\ncbrown[1].set_title('Movimiento browniano escalado')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEl valor de c es  0.2\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Tarea4_files/figure-html/cell-2-output-2.png){width=571 height=431}\n:::\n:::\n\n\n::: {#exr-1}\n\nModifique el script `half_brownian_refinement.py` encapsulando el código en una función. Esta función deberá recibir el extremo derecho del intervalo $[0, T]$ y el número de incrementos $N$ de un camino browniano base. El propósito es calcular los incrementos de relleno de una refinamiento con $2N$ incrementos. \n:::\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nprng = np.random.RandomState(10)\n\ndef refined_brownian_2n(T,L):\n    dt = T / L\n    W = np.zeros(L + 1)\n    W_refined = np.zeros(2 * L + 1)\n    xi = np.sqrt(dt) * prng.normal(size=L)\n    xi_half = np.sqrt(0.5 * dt) * prng.normal(size=L)\n    W[1:] = xi.cumsum()\n    W_ = np.roll(W, -1)\n    W_half = 0.5 * (W + W_)\n    W_half = np.delete(W_half, -1) + xi_half\n    W_refined[1::2] = W_half\n    W_refined[2::2] = W[1:]\n    t = np.arange(0, T + dt, dt)\n    t_half = np.arange(0, T + 0.5 * dt, 0.5 * dt)\n    return t, t_half, W, W_refined\n```\n:::\n\n\n::: {#exr-1}\n\nEn un script separado, incluya la función de arriba y grafique una figura con la trayectoria del browniano con 100 incrementos y muestre su refinamiento correspondiente.\n:::\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntime, bi_time, w, bi_w = refined_brownian_2n(1,100)\n\nplt.plot(time, w, 'b-+')\nplt.plot(\n    bi_time,\n    bi_w,\n    'ro--',\n    alpha=0.5\n)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Tarea4_files/figure-html/cell-4-output-1.png){width=582 height=411}\n:::\n:::\n\n\n",
    "supporting": [
      "Tarea4_files"
    ],
    "filters": [],
    "includes": {}
  }
}