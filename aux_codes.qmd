# Codigos Usados en las Tareas. (Se encuentran en la carpeta PythonScripts)


## Movimiento Browniano

```{python}

import numpy as np

def u(t: float, n_points: int):
    dt = t / (n_points - 1)
    dw = np.sqrt(dt) * np.random.standard_normal(n_points - 1)
    w = np.zeros(n_points)
    w[1:] = dw.cumsum()
    time = np.linspace(0, t, n_points)
    return time, w


```

## Intregral de Ito

```{python}

import numpy as np
def f(x: float, t: float):
    y = x ** 2
    return y
     

def fB(partition: np.array, x: float, t: float):
    y = 0
    for i in range(len(partition) - 1):
        if partition[i] <= t < partition[i + 1]:
            y = f(x, t)
    return y

def ito_n(n_points: int, t: float):
    time, w = bw.u(t, n_points)
    integral = np.zeros(n_points)
    for i in range(n_points - 1):
        integral[i] = fB(time, w[i], time[i]) * (w[i + 1] - w[i])
    ito = integral.sum()
    return w, ito


```


## Integral de Riemann
```{python}
import numpy as np

def v(t: float):
    y = np.exp( - t)
    return y

def riemann_integral(a, b, n_points):
    r = np.zeros(n_points)
    time = np.linspace(a,b,n_points)
    for i in range(n_points - 1):
        r[i] = v(time[i]) * (time[i + 1] - time[i])
    riemann = r.sum()
    return riemann



```