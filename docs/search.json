[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "stochacalculus",
    "section": "",
    "text": "1 Ecuaciones Diferenciales Estocásticas\nAhora, vamos"
  },
  {
    "objectID": "Tarea1.html",
    "href": "Tarea1.html",
    "title": "2  plt.show()",
    "section": "",
    "text": "Ejecute y explica en pocas palabras la salida del código ex_001.py\n\n\nfrom scipy.stats import multivariate_normal\nfrom mpl_toolkits.mplot3d import axes3d\nfrom scipy.stats import norm\nimport numpy as np\nfrom scipy.stats import bernoulli\nimport matplotlib.pyplot as plt\nfig_01, ax_01 = plt.subplots(1, 1)\nfig_02, ax_02 = plt.subplots(1, 1)\np = 0.3\nmean, var, skew, kurt = bernoulli.stats(p, moments='mvsk')\nprint(mean, var, skew,kurt)\n\nx = np.arange(bernoulli.ppf(0.01, p), bernoulli.ppf(0.99, p))\nax_01.plot(x, bernoulli.pmf(x, p), 'bo', ms=8, label='bernoulli pmf')\nax_01.vlines(x, 0, bernoulli.pmf(x, p), colors='b', lw=5, alpha=0.5)\nr = bernoulli.rvs(p, size=1000)\nax_02.hist(r, bins=200)\nplt.show()\n\n0.3 0.21 0.8728715609439694 -1.2380952380952381\n\n\n\n\n\n\n\n\nEl código posee 3 salidas: * Un vector \\([0.3, 0.21, 0.87, -1.23]\\) * Dos gráficas.\nEl vector hace referencia a los momentos de la distribución bernoulli con parámetro \\(p=0.3\\). * mean hace referencia a la media. * var hace referencia a la varianza. * skew hace referencia al sesgo. * kurt hace referencia a la kurtosis.\nFinalmente, las dos gráficas: * La primera hace referencia a la función de probabilidad. Notemos que \\(\\mathcal{P}[X = 0] = 0.7\\), lo que muestra la gráfica. Notemos que la gráfica va de -0.04 a 0.04, por lo tanto no se iba a mostrar el caso \\(X=1\\).\n* La segunda hace referencia a una simulación: Se generaron una muestra de tamaño \\(N\\) variables aleatorias con distribución bernoulli. Como la distribución bernoulli tiene media \\(Np\\), pretende mostrar que en efecto, habrá de forma aproximada \\(Np\\) valores igual a 1 y \\(N(1-p)\\) valores igual a 0.\n\nEjecute y explica en pocas palabras la salida del código ex_002.py\n\n\nfig, ax = plt.subplots(1, 1)\nmean, var, skew, kurt = norm.stats(moments='mvsk')\n\nx = np.linspace(norm.ppf(0.01), norm.ppf(0.99), 100)\nax.plot(\n    x,\n    norm.pdf(x),\n    'r-',\n    lw=5,\n    alpha=0.6,\n    label='norm pdf'\n)\nrv = norm()\nax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')\nvals = norm.ppf([0.001, 0.5, 0.999])\n\nnp.allclose([0.001, 0.5, 0.999], norm.cdf(vals))\n\nr = norm.rvs(size=50000)\n\nax.hist(r, density=True, bins='auto', histtype='stepfilled', alpha=0.2)\nax.set_xlim([x[0], x[-1]])\nax.legend(loc='best', frameon=False)\nplt.show()\n\n\n\n\nEl código posee una gráfica. Que hace referencia a una simulación de variables aleatorias normales. Notemos que * El elemento en azul, hace referencia a un histograma que refleja las frecuencias de los valores generados. * Mientras que la linea roja, muestra la función de densidad de una variable aleatoria estándar.\n\nEjecute y explica en pocas palabras la salida del código ex_003.py\n\nPara cambiar el vector de medias \\(\\mu\\) y la matriz \\(\\Sigma\\) hay que prestar atención en la linea donde aparece la función multivariate_normal() que de forma simple posee dos parámetros: * El vector de medias \\(\\mu = [0.5, -0.2]\\) * La matriz de covarianza \\(\\Sigma = [[2.0, 0.3], [0.3, 0.5]]\\)\n\nx = np.linspace(0, 5, 100, endpoint=False)\ny = multivariate_normal.pdf(x, mean=2.5, cov=0.5)\n\nfig1 = plt.figure()\nax = fig1.add_subplot(111)\nax.plot(x, y)\n\nx, y = np.mgrid[-5:5:.1, -5:5:.1]\npos = np.dstack((x, y))\nrv = multivariate_normal([0.1, 0.5], [[3.0, 0.3], [0.75, 1.5]])\nfig2 = plt.figure()\nax2 = fig2.add_subplot(111)\nax2.contourf(x, y, rv.pdf(pos))\n# plt.show()\n\nax = plt.figure().add_subplot(projection='3d')\nax.plot_surface(\n    x,\n    y,\n    rv.pdf(pos),\n    edgecolor='royalblue',\n    lw=0.5,\n    rstride=8,\n    cstride=8,\n    alpha=0.4\n)\nax.contour(x, y, rv.pdf(pos), zdir='z', offset=-.2, cmap='coolwarm')\nax.contour(x, y, rv.pdf(pos), zdir='x', offset=-5, cmap='coolwarm')\nax.contour(x, y, rv.pdf(pos), zdir='y', offset=5, cmap='coolwarm')\n\nax.set(\n    xlim=(-5, 5),\n    ylim=(-5, 5),\n    zlim=(-0.2, 0.2),\n    xlabel='X',\n    ylabel='Y',\n    zlabel='Z'\n)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n2.0.1 Generando Normales\n\nimport numpy as np\nfrom scipy.stats import bernoulli\nimport matplotlib.pyplot as plt\n\nfig_01, ax_01 = plt.subplots(1, 1)\nfig_02, ax_02 = plt.subplots(1, 1)\n\np = 0.3\n\nx = np.arange(bernoulli.ppf(0.01, p), bernoulli.ppf(0.99, p))\nax_01.plot(x, bernoulli.pmf(x, p), 'bo', ms = 8, label = 'bernoulli pmf')\nax_01.vlines(x, 0, bernoulli.pmf(x, p), colors = 'b', lw = 5, alpha = 0.5)\n\nr = bernoulli.rvs(p, size = 1000)\nax_02.hist(r, bins = 200)\n\n(array([727.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n          0., 273.]),\n array([0.   , 0.005, 0.01 , 0.015, 0.02 , 0.025, 0.03 , 0.035, 0.04 ,\n        0.045, 0.05 , 0.055, 0.06 , 0.065, 0.07 , 0.075, 0.08 , 0.085,\n        0.09 , 0.095, 0.1  , 0.105, 0.11 , 0.115, 0.12 , 0.125, 0.13 ,\n        0.135, 0.14 , 0.145, 0.15 , 0.155, 0.16 , 0.165, 0.17 , 0.175,\n        0.18 , 0.185, 0.19 , 0.195, 0.2  , 0.205, 0.21 , 0.215, 0.22 ,\n        0.225, 0.23 , 0.235, 0.24 , 0.245, 0.25 , 0.255, 0.26 , 0.265,\n        0.27 , 0.275, 0.28 , 0.285, 0.29 , 0.295, 0.3  , 0.305, 0.31 ,\n        0.315, 0.32 , 0.325, 0.33 , 0.335, 0.34 , 0.345, 0.35 , 0.355,\n        0.36 , 0.365, 0.37 , 0.375, 0.38 , 0.385, 0.39 , 0.395, 0.4  ,\n        0.405, 0.41 , 0.415, 0.42 , 0.425, 0.43 , 0.435, 0.44 , 0.445,\n        0.45 , 0.455, 0.46 , 0.465, 0.47 , 0.475, 0.48 , 0.485, 0.49 ,\n        0.495, 0.5  , 0.505, 0.51 , 0.515, 0.52 , 0.525, 0.53 , 0.535,\n        0.54 , 0.545, 0.55 , 0.555, 0.56 , 0.565, 0.57 , 0.575, 0.58 ,\n        0.585, 0.59 , 0.595, 0.6  , 0.605, 0.61 , 0.615, 0.62 , 0.625,\n        0.63 , 0.635, 0.64 , 0.645, 0.65 , 0.655, 0.66 , 0.665, 0.67 ,\n        0.675, 0.68 , 0.685, 0.69 , 0.695, 0.7  , 0.705, 0.71 , 0.715,\n        0.72 , 0.725, 0.73 , 0.735, 0.74 , 0.745, 0.75 , 0.755, 0.76 ,\n        0.765, 0.77 , 0.775, 0.78 , 0.785, 0.79 , 0.795, 0.8  , 0.805,\n        0.81 , 0.815, 0.82 , 0.825, 0.83 , 0.835, 0.84 , 0.845, 0.85 ,\n        0.855, 0.86 , 0.865, 0.87 , 0.875, 0.88 , 0.885, 0.89 , 0.895,\n        0.9  , 0.905, 0.91 , 0.915, 0.92 , 0.925, 0.93 , 0.935, 0.94 ,\n        0.945, 0.95 , 0.955, 0.96 , 0.965, 0.97 , 0.975, 0.98 , 0.985,\n        0.99 , 0.995, 1.   ]),\n &lt;BarContainer object of 200 artists&gt;)\n\n\n\n\n\n\n\n\n\nfrom scipy.stats import norm\n\nfig, ax = plt.subplots(1,1)\n\nx = np.linspace(norm.ppf(0.01),norm.ppf(0.99), 100)\nax.plot(x, norm.pdf(x),'r-', lw = 5, alpha = 0.6)\n\nr = norm.rvs(size = 1000)\n\nax.hist(r, density = True, bins = 'auto', histtype = 'stepfilled', alpha = 0.2)\nax.set_xlim(x[0], x[-1])\nax.legend(loc='best', frameon = False)\n\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n\n&lt;matplotlib.legend.Legend at 0x20c2acaca10&gt;\n\n\n\n\n\n\nfrom mpl_toolkits.mplot3d import axes3d\nfrom scipy.stats import multivariate_normal\n\nx = np.linspace(0,5,100,endpoint = False)\ny = multivariate_normal.pdf(x , mean = 2.5, cov = 0.5)\n\nfig1 = plt.figure()\nax = fig1.add_subplot(111)\nax.plot(x,y)\n\nx, y = np.mgrid[-5:5:.1, -5:5:.1]\n\npos = np.dstack((x,y))\nrv = multivariate_normal([0.5, -0.2], [[2.0,0.3], [0.3,0.5]])\nfig2 = plt.figure()\nax2 = fig2.add_subplot(111)\nax2.contourf(x,y, rv.pdf(pos))\n\nax = plt.figure().add_subplot(projection = '3d')\nax.plot_surface(x,\n                y,\n                rv.pdf(pos),\n                edgecolor = 'royalblue',\n                lw = 0.5,\n                rstride = 8,\n                cstride = 8,\n                alpha = 0.5)\n\n&lt;mpl_toolkits.mplot3d.art3d.Poly3DCollection at 0x20c2a65cf10&gt;"
  }
]